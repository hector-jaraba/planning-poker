"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/socketio";
exports.ids = ["pages/api/socketio"];
exports.modules = {

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("mongoose");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "socket.io":
/*!****************************!*\
  !*** external "socket.io" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("socket.io");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsocketio&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsocketio.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsocketio&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsocketio.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_socketio_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/socketio.js */ \"(api)/./src/pages/api/socketio.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_socketio_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_socketio_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/socketio\",\n        pathname: \"/api/socketio\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_socketio_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnNvY2tldGlvJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGc3JjJTJGcGFnZXMlMkZhcGklMkZzb2NrZXRpby5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN3RDtBQUN4RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsdURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHVEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2N1cnNvci1wbGFubmluZy1wb2tlci8/NGU0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjL3BhZ2VzL2FwaS9zb2NrZXRpby5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3NvY2tldGlvXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc29ja2V0aW9cIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsocketio&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsocketio.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/pages/api/socketio.js":
/*!***********************************!*\
  !*** ./src/pages/api/socketio.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"socket.io\");\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socket_io__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// SessionModel definition\nlet SessionModel;\ntry {\n    // Try to get the model if it exists\n    SessionModel = mongoose__WEBPACK_IMPORTED_MODULE_1___default().model(\"Session\");\n} catch (e) {\n    // Define Session schema if not already defined\n    const SessionSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_1___default().Schema)({\n        name: {\n            type: String,\n            required: true\n        },\n        ownerId: {\n            type: String,\n            required: true\n        },\n        participants: [\n            String\n        ],\n        tasks: [\n            {\n                title: {\n                    type: String,\n                    required: true\n                },\n                description: String,\n                jiraId: String,\n                status: {\n                    type: String,\n                    enum: [\n                        \"pending\",\n                        \"active\",\n                        \"completed\"\n                    ],\n                    default: \"pending\"\n                },\n                estimates: [\n                    {\n                        userId: String,\n                        value: (mongoose__WEBPACK_IMPORTED_MODULE_1___default().Schema).Types.Mixed\n                    }\n                ],\n                finalEstimate: (mongoose__WEBPACK_IMPORTED_MODULE_1___default().Schema).Types.Mixed\n            }\n        ],\n        estimationType: {\n            type: String,\n            enum: [\n                \"fibonacci\",\n                \"tshirt\"\n            ],\n            default: \"fibonacci\"\n        },\n        status: {\n            type: String,\n            enum: [\n                \"active\",\n                \"completed\"\n            ],\n            default: \"active\"\n        },\n        shareLink: String\n    });\n    // Create the model\n    SessionModel = mongoose__WEBPACK_IMPORTED_MODULE_1___default().model(\"Session\", SessionSchema);\n}\n// Connect to MongoDB\nconst connectDB = async ()=>{\n    try {\n        if ((mongoose__WEBPACK_IMPORTED_MODULE_1___default().connection).readyState === 0) {\n            await mongoose__WEBPACK_IMPORTED_MODULE_1___default().connect(process.env.MONGODB_URI);\n            console.log(\"MongoDB connected\");\n        }\n    } catch (error) {\n        console.error(\"MongoDB connection error:\", error);\n    }\n};\n// Track connected users and sessions\nconst connectedUsers = new Map();\nconst sessionRooms = new Map();\n// Track participants with their usernames for each session\nconst sessionParticipants = new Map();\nfunction handler(req, res) {\n    if (res.socket.server.io) {\n        console.log(\"Socket is already running\");\n        res.end();\n        return;\n    }\n    console.log(\"Setting up socket.io server...\");\n    const io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(res.socket.server, {\n        path: \"/api/socketio\",\n        addTrailingSlash: false\n    });\n    res.socket.server.io = io;\n    // Socket.io event handlers\n    io.on(\"connection\", async (socket)=>{\n        const { sessionId, userId, username } = socket.handshake.query;\n        if (!sessionId || !userId) {\n            socket.disconnect();\n            return;\n        }\n        // Clean and format username for display\n        const displayName = username ? String(username).trim() || `User ${userId.substring(0, 6)}` : `User ${userId.substring(0, 6)}`;\n        console.log(`User ${displayName} (${userId}) connected to session ${sessionId}`);\n        // Join the session room\n        socket.join(sessionId);\n        // Track connected users\n        connectedUsers.set(socket.id, {\n            userId,\n            username: displayName,\n            sessionId\n        });\n        // Track session participants with usernames\n        if (!sessionParticipants.has(sessionId)) {\n            sessionParticipants.set(sessionId, new Map());\n        }\n        sessionParticipants.get(sessionId).set(userId, {\n            username: displayName,\n            connected: true\n        });\n        // Track session participants\n        if (!sessionRooms.has(sessionId)) {\n            sessionRooms.set(sessionId, new Set());\n        }\n        sessionRooms.get(sessionId).add(socket.id);\n        // Send updated participant list to all users in the session\n        const participantsList = Array.from(sessionParticipants.get(sessionId).entries()).map(([id, data])=>({\n                userId: id,\n                username: data.username,\n                connected: data.connected\n            }));\n        console.log(\"Broadcasting participants list:\", participantsList);\n        io.to(sessionId).emit(\"participants_update\", participantsList);\n        // Notify other users in the room\n        socket.to(sessionId).emit(\"user_joined\", {\n            userId,\n            username: displayName\n        });\n        // Basic ping/pong for connection testing\n        socket.on(\"ping\", (data)=>{\n            console.log(`Ping received from ${displayName} (${userId}):`, data);\n            socket.emit(\"pong\", {\n                message: \"Server received ping\",\n                timestamp: Date.now()\n            });\n        });\n        // Event handlers for session activities\n        socket.on(\"submit_estimate\", async (data)=>{\n            try {\n                const { taskId, value } = data;\n                console.log(\"submit_estimate received:\", {\n                    taskId,\n                    value,\n                    userId,\n                    sessionId\n                });\n                await connectDB();\n                // Find the session\n                const session = await SessionModel.findById(sessionId);\n                if (!session) {\n                    console.error(\"Session not found:\", sessionId);\n                    return;\n                }\n                // Find the task\n                const task = session.tasks.find((t)=>t.id === taskId || t._id.toString() === taskId);\n                if (!task) {\n                    console.error(\"Task not found in session:\", taskId);\n                    return;\n                }\n                console.log(\"Processing estimate for task:\", task.title);\n                // Check if user already estimated\n                const existingEstimateIndex = task.estimates.findIndex((e)=>e.userId.toString() === userId.toString());\n                // Value can be null for \"?\" selections\n                const hasActualValue = value !== null && value !== undefined && value !== \"?\";\n                if (existingEstimateIndex >= 0) {\n                    // Update existing estimate\n                    console.log(\"Updating existing estimate for user:\", userId);\n                    task.estimates[existingEstimateIndex].value = hasActualValue ? value : null;\n                    task.estimates[existingEstimateIndex].hasEstimate = hasActualValue;\n                } else {\n                    // Add new estimate\n                    console.log(\"Adding new estimate for user:\", userId);\n                    task.estimates.push({\n                        userId: userId,\n                        value: hasActualValue ? value : null,\n                        hasEstimate: hasActualValue\n                    });\n                }\n                // Ensure task has a revealed property\n                if (task.revealed === undefined) {\n                    task.revealed = false;\n                }\n                // Save and broadcast update\n                await session.save();\n                console.log(\"Session saved with new estimate, emitting update\");\n                // Create a masked version where estimate values are hidden if not revealed\n                const sessionForBroadcast = JSON.parse(JSON.stringify(session));\n                // Mask ALL tasks that are not revealed, not just the current one\n                sessionForBroadcast.tasks.forEach((t)=>{\n                    // Make sure each task has the revealed property\n                    if (t.revealed === undefined) {\n                        t.revealed = false;\n                    }\n                    // If this task is not revealed, hide all estimates except the user's own\n                    if (t.revealed !== true) {\n                        t.estimates = t.estimates.map((e)=>{\n                            const isCurrentUser = e.userId.toString() === userId.toString();\n                            const hasValue = e.value !== undefined && e.value !== null;\n                            return {\n                                userId: e.userId,\n                                hasEstimate: hasValue || e.hasEstimate === true,\n                                // Only show actual value to the user who submitted it, otherwise use \"-\"\n                                value: isCurrentUser && hasValue ? e.value : isCurrentUser ? \"-\" : null\n                            };\n                        });\n                    }\n                });\n                console.log(\"Broadcasting session update with hidden estimates\");\n                io.to(sessionId).emit(\"session_update\", sessionForBroadcast);\n                // Also send an event indicating someone has estimated (without revealing the value)\n                io.to(sessionId).emit(\"user_estimated\", {\n                    userId,\n                    username: displayName,\n                    taskId: task._id.toString()\n                });\n            } catch (error) {\n                console.error(\"Error submitting estimate:\", error);\n            }\n        });\n        // Add a new event handler for revealing estimates\n        socket.on(\"reveal_estimates\", async (data)=>{\n            try {\n                const { taskId } = data;\n                console.log(\"reveal_estimates received:\", {\n                    taskId,\n                    userId,\n                    sessionId,\n                    fromAdmin: displayName\n                });\n                await connectDB();\n                // Find the session\n                const session = await SessionModel.findById(sessionId);\n                if (!session) {\n                    console.error(\"Session not found:\", sessionId);\n                    return;\n                }\n                // Find the task\n                const task = session.tasks.find((t)=>t.id === taskId || t._id.toString() === taskId);\n                if (!task) {\n                    console.error(\"Task not found in session:\", taskId);\n                    return;\n                }\n                // Set revealed flag to true\n                task.revealed = true;\n                // First, save session with revealed flag\n                await session.save();\n                console.log(\"Estimates revealed for task:\", task.title);\n                // Extract and prepare the actual estimate values from the task\n                const cleanEstimates = task.estimates.map((est)=>({\n                        userId: est.userId ? est.userId.toString() : est.userId,\n                        value: est.value,\n                        hasEstimate: est.value !== undefined && est.value !== null\n                    }));\n                console.log(\"Sending revealed estimates:\", cleanEstimates);\n                // First send the reveal event with full estimate data\n                io.to(sessionId).emit(\"estimates_revealed\", {\n                    taskId: task._id.toString(),\n                    estimates: cleanEstimates\n                });\n                // Then send full session update with all estimate values visible\n                const fullSessionCopy = JSON.parse(JSON.stringify(session));\n                // Make sure all estimates have proper values in all tasks\n                fullSessionCopy.tasks.forEach((t)=>{\n                    // Initialize revealed property if missing\n                    if (t.revealed === undefined) {\n                        t.revealed = t._id.toString() === taskId;\n                    }\n                    // For the revealed task, make sure all estimate data is complete\n                    if (t._id.toString() === taskId) {\n                        t.estimates = t.estimates.map((est)=>({\n                                userId: est.userId,\n                                value: est.value,\n                                hasEstimate: est.value !== undefined && est.value !== null\n                            }));\n                    }\n                });\n                // Send the complete session data\n                io.to(sessionId).emit(\"session_update\", fullSessionCopy);\n            } catch (error) {\n                console.error(\"Error revealing estimates:\", error);\n            }\n        });\n        // Add a new event handler for hiding estimates\n        socket.on(\"hide_estimates\", async (data)=>{\n            try {\n                const { taskId } = data;\n                console.log(\"hide_estimates received:\", {\n                    taskId,\n                    userId,\n                    sessionId,\n                    fromAdmin: displayName\n                });\n                await connectDB();\n                // Find the session\n                const session = await SessionModel.findById(sessionId);\n                if (!session) {\n                    console.error(\"Session not found:\", sessionId);\n                    return;\n                }\n                // Find the task\n                const task = session.tasks.find((t)=>t.id === taskId || t._id.toString() === taskId);\n                if (!task) {\n                    console.error(\"Task not found in session:\", taskId);\n                    return;\n                }\n                // Set revealed flag to false\n                task.revealed = false;\n                // Save and broadcast update\n                await session.save();\n                console.log(\"Estimates hidden for task:\", task.title);\n                // Broadcast the hide event first\n                io.to(sessionId).emit(\"estimates_hidden\", {\n                    taskId: task._id.toString()\n                });\n                // Create a masked version\n                const sessionForBroadcast = JSON.parse(JSON.stringify(session));\n                sessionForBroadcast.tasks.forEach((t)=>{\n                    // Make sure each task has the revealed property\n                    if (t.revealed === undefined) {\n                        t.revealed = false;\n                    }\n                    // If this task is not revealed, hide all estimates except the user's own\n                    if (t.revealed !== true) {\n                        t.estimates = t.estimates.map((e)=>({\n                                userId: e.userId,\n                                hasEstimate: e.value !== undefined && e.value !== null,\n                                // Only show actual value to the user who submitted it\n                                value: e.userId.toString() === userId.toString() ? e.value : null\n                            }));\n                    }\n                });\n                // Then send masked session update\n                io.to(sessionId).emit(\"session_update\", sessionForBroadcast);\n            } catch (error) {\n                console.error(\"Error hiding estimates:\", error);\n            }\n        });\n        socket.on(\"set_active_task\", async (data)=>{\n            try {\n                // Immediately acknowledge receipt\n                socket.emit(\"set_active_task_received\", {\n                    taskId: data?.taskId\n                });\n                const { taskId } = data || {};\n                if (!taskId) {\n                    console.error(\"Invalid taskId received:\", data);\n                    socket.emit(\"set_active_task_error\", {\n                        error: \"Invalid task ID\"\n                    });\n                    return;\n                }\n                console.log(\"set_active_task received:\", {\n                    taskId,\n                    userId,\n                    sessionId,\n                    taskIdType: typeof taskId\n                });\n                await connectDB();\n                // Find the session\n                const session = await SessionModel.findById(sessionId);\n                if (!session) {\n                    console.error(\"Session not found:\", sessionId);\n                    socket.emit(\"set_active_task_error\", {\n                        error: \"Session not found\"\n                    });\n                    return;\n                }\n                console.log(\"Session tasks:\", session.tasks.map((t)=>({\n                        id: t.id,\n                        _id: t._id?.toString(),\n                        title: t.title,\n                        status: t.status\n                    })));\n                // Update task status\n                let taskFound = false;\n                // First pass: Find the task to make active and remember current status of all tasks\n                const taskStatusMap = new Map();\n                session.tasks.forEach((task)=>{\n                    const taskIdStr = task._id.toString();\n                    taskStatusMap.set(taskIdStr, task.status);\n                });\n                // Second pass: Update statuses\n                session.tasks.forEach((task)=>{\n                    // Try different ways to match the task ID\n                    const taskIdStr = task._id.toString();\n                    const taskIdMatches = task.id === taskId || taskIdStr === taskId || task._id.toString() === taskId;\n                    if (taskIdMatches) {\n                        console.log(\"Setting task as active:\", {\n                            title: task.title,\n                            id: task.id,\n                            _id: task._id.toString(),\n                            previousStatus: task.status\n                        });\n                        task.status = \"active\";\n                        taskFound = true;\n                    } else if (task.status === \"active\") {\n                        console.log(\"Changing previously active task status:\", task.title);\n                        // If task was previously completed, keep it completed\n                        if (taskStatusMap.get(taskIdStr) === \"completed\") {\n                            task.status = \"completed\";\n                        } else {\n                            // Mark previous active task as completed when moving to a new task\n                            task.status = \"completed\";\n                        }\n                    } else {\n                        // Keep other tasks as they are (pending or completed)\n                        // This ensures completed tasks stay completed\n                        console.log(`Keeping task \"${task.title}\" as ${task.status}`);\n                    }\n                });\n                if (!taskFound) {\n                    console.error(\"No matching task found:\", taskId);\n                    socket.emit(\"set_active_task_error\", {\n                        error: \"Task not found\"\n                    });\n                    return;\n                }\n                // Save updated session\n                await session.save();\n                // Send success response\n                socket.emit(\"set_active_task_success\", {\n                    taskId,\n                    message: \"Task set as active successfully\"\n                });\n                // Broadcast session update to all users\n                io.to(sessionId).emit(\"session_update\", session);\n                console.log(\"Task set as active, session updated\");\n            } catch (error) {\n                console.error(\"Error setting active task:\", error);\n                socket.emit(\"set_active_task_error\", {\n                    error: \"Server error processing request\"\n                });\n            }\n        });\n        socket.on(\"add_task\", async (data)=>{\n            // First acknowledge receipt to keep the socket open\n            socket.emit(\"add_task_received\", {\n                status: \"received\",\n                message: \"Task request received by server\",\n                taskData: data\n            });\n            try {\n                const { title, description, jiraId } = data;\n                console.log(\"add_task received from:\", displayName, \"(\", userId, \")\", {\n                    title,\n                    description,\n                    jiraId,\n                    sessionId\n                });\n                // Double-check connection\n                if (!socket.connected) {\n                    console.error(\"Socket disconnected during task creation\");\n                    return;\n                }\n                try {\n                    await connectDB();\n                    // Find the session\n                    const session = await SessionModel.findById(sessionId);\n                    if (!session) {\n                        console.error(\"Session not found:\", sessionId);\n                        if (socket.connected) {\n                            socket.emit(\"add_task_error\", {\n                                error: \"Session not found\"\n                            });\n                        }\n                        return;\n                    }\n                    // Create new task with proper MongoDB document structure\n                    const newTask = {\n                        title,\n                        description: description || \"\",\n                        jiraId: jiraId || undefined,\n                        status: \"pending\",\n                        estimates: []\n                    };\n                    // Add task to session\n                    session.tasks.push(newTask);\n                    const newTaskId = session.tasks[session.tasks.length - 1]._id;\n                    console.log(\"Task added:\", {\n                        title: newTask.title,\n                        taskId: newTaskId\n                    });\n                    // Save session in a separate try block\n                    try {\n                        await session.save();\n                        console.log(\"Session saved with new task, emitting response\");\n                        // Check if socket is still connected\n                        if (socket.connected) {\n                            // First send a success confirmation to the task creator\n                            socket.emit(\"add_task_success\", {\n                                taskId: newTaskId.toString(),\n                                message: \"Task created successfully\"\n                            });\n                            // Then broadcast to all users in the room\n                            io.to(sessionId).emit(\"session_update\", session);\n                            console.log(\"Session update emitted to room\", sessionId);\n                        } else {\n                            console.warn(\"Socket disconnected before sending success response\");\n                        }\n                    } catch (saveError) {\n                        console.error(\"Error saving session:\", saveError);\n                        if (socket.connected) {\n                            socket.emit(\"add_task_error\", {\n                                error: \"Failed to save task\"\n                            });\n                        }\n                    }\n                } catch (dbError) {\n                    console.error(\"Database error:\", dbError);\n                    if (socket.connected) {\n                        socket.emit(\"add_task_error\", {\n                            error: \"Database error\"\n                        });\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error adding task:\", error);\n                if (socket.connected) {\n                    socket.emit(\"add_task_error\", {\n                        error: \"Server error processing task\"\n                    });\n                }\n            }\n        });\n        socket.on(\"refresh_session\", async ()=>{\n            try {\n                await connectDB();\n                // Find the session\n                const session = await SessionModel.findById(sessionId);\n                if (!session) return;\n                // Create a proper copy of the session with consistent formatting\n                const processedSession = JSON.parse(JSON.stringify(session));\n                // Ensure all tasks have proper revealed state and estimate formatting\n                processedSession.tasks.forEach((task)=>{\n                    // Initialize revealed if missing\n                    if (task.revealed === undefined) {\n                        task.revealed = false;\n                    }\n                    // For non-revealed tasks, mask estimates except for the current user\n                    if (task.revealed !== true) {\n                        task.estimates = task.estimates.map((est)=>{\n                            const isCurrentUser = est.userId && est.userId.toString() === userId.toString();\n                            const hasValue = est.value !== undefined && est.value !== null;\n                            return {\n                                userId: est.userId,\n                                hasEstimate: hasValue || est.hasEstimate === true,\n                                // Only show actual value to current user\n                                value: isCurrentUser && hasValue ? est.value : isCurrentUser ? \"-\" : null\n                            };\n                        });\n                    } else {\n                        // For revealed tasks, ensure all estimates have consistent structure\n                        task.estimates = task.estimates.map((est)=>({\n                                userId: est.userId,\n                                value: est.value,\n                                hasEstimate: est.value !== undefined && est.value !== null\n                            }));\n                    }\n                });\n                // Broadcast the processed session update\n                io.to(sessionId).emit(\"session_update\", processedSession);\n            } catch (error) {\n                console.error(\"Error refreshing session:\", error);\n            }\n        });\n        socket.on(\"set_final_estimate\", async (data)=>{\n            try {\n                const { taskId, estimate } = data;\n                console.log(\"set_final_estimate received:\", {\n                    taskId,\n                    estimate,\n                    userId,\n                    sessionId,\n                    fromAdmin: displayName\n                });\n                await connectDB();\n                // Find the session\n                const session = await SessionModel.findById(sessionId);\n                if (!session) {\n                    console.error(\"Session not found:\", sessionId);\n                    return;\n                }\n                // Find the task\n                const task = session.tasks.find((t)=>t.id === taskId || t._id.toString() === taskId);\n                if (!task) {\n                    console.error(\"Task not found in session:\", taskId);\n                    return;\n                }\n                // Set final estimate and mark task as completed\n                task.finalEstimate = estimate;\n                task.status = \"completed\";\n                task.revealed = true; // Make sure estimates are revealed with final estimate\n                // Save and broadcast update\n                await session.save();\n                console.log(\"Final estimate set for task:\", task.title, \"=\", estimate);\n                // Broadcast task completed event\n                io.to(sessionId).emit(\"task_completed\", {\n                    taskId: task._id.toString(),\n                    finalEstimate: estimate\n                });\n                // Send full session update\n                io.to(sessionId).emit(\"session_update\", session);\n            } catch (error) {\n                console.error(\"Error setting final estimate:\", error);\n            }\n        });\n        // Handle disconnection\n        socket.on(\"disconnect\", ()=>{\n            const userData = connectedUsers.get(socket.id);\n            if (userData) {\n                console.log(`User ${userData.username} disconnected from session ${userData.sessionId}`);\n                // Remove from connected users\n                connectedUsers.delete(socket.id);\n                // Update session participants\n                if (sessionParticipants.has(userData.sessionId) && sessionParticipants.get(userData.sessionId).has(userData.userId)) {\n                    sessionParticipants.get(userData.sessionId).get(userData.userId).connected = false;\n                    // Send updated participant list\n                    const participantsList = Array.from(sessionParticipants.get(userData.sessionId).entries()).map(([id, data])=>({\n                            userId: id,\n                            username: data.username,\n                            connected: data.connected\n                        }));\n                    io.to(userData.sessionId).emit(\"participants_update\", participantsList);\n                }\n                // Remove from session room\n                if (sessionRooms.has(userData.sessionId)) {\n                    sessionRooms.get(userData.sessionId).delete(socket.id);\n                    // If room is empty, cleanup\n                    if (sessionRooms.get(userData.sessionId).size === 0) {\n                        sessionRooms.delete(userData.sessionId);\n                        sessionParticipants.delete(userData.sessionId);\n                    }\n                }\n                // Notify other users in the room\n                socket.to(userData.sessionId).emit(\"user_left\", {\n                    userId: userData.userId,\n                    username: userData.username\n                });\n            }\n        });\n    });\n    res.end();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/socketio.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsocketio&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsocketio.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();