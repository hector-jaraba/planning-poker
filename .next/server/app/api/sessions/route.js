"use strict";(()=>{var e={};e.id=772,e.ids=[772],e.modules={58802:e=>{e.exports=require("bcrypt")},38013:e=>{e.exports=require("mongodb")},11185:e=>{e.exports=require("mongoose")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},39491:e=>{e.exports=require("assert")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},63477:e=>{e.exports=require("querystring")},57310:e=>{e.exports=require("url")},73837:e=>{e.exports=require("util")},59796:e=>{e.exports=require("zlib")},56275:(e,t,r)=>{let s;r.r(t),r.d(t,{headerHooks:()=>S,originalPathname:()=>h,requestAsyncStorage:()=>x,routeModule:()=>f,serverHooks:()=>y,staticGenerationAsyncStorage:()=>w,staticGenerationBailout:()=>q});var o={};r.r(o),r.d(o,{GET:()=>GET,POST:()=>POST}),r(78976);var n=r(10884),i=r(16132),a=r(95798),u=r(94020),l=r(24685),c=r(9919),d=r(92067),p=r(11185),g=r.n(p),m=r(53178);try{s=g().model("User")}catch(t){let e=new(g()).Schema({name:String,email:{type:String,unique:!0,required:!0},password:String,role:{type:String,enum:["user","admin"],default:"user"},createdAt:{type:Date,default:Date.now}});s=g().model("User",e)}async function POST(e){try{await (0,c.$)();let t=await (0,u.getServerSession)(l.authOptions);if(!t||!t.user)return a.Z.json({error:"Authentication required"},{status:401});let{name:r,estimationType:o="fibonacci"}=await e.json();if(!r)return a.Z.json({error:"Session name is required"},{status:400});let n=t.user,i=n.id||n.email;if(!i)return a.Z.json({error:"User ID not found"},{status:401});console.log("Creating session for user:",i,"with email:",n.email);let p=i;i||"test@example.com"!==n.email||(p="test-user-1",console.log("Using test-user-1 ID for test@example.com user"));let g=(0,m.Z)();if(console.log(`Creating session "${r}" with owner ${p}`),i&&"admin"!==n.role)try{let e=await s.findById(i);e?(e.role="admin",await e.save(),console.log(`User ${i} promoted to admin role after creating a session`)):console.warn(`Could not find user with ID ${i} to promote to admin`)}catch(e){console.error("Error promoting user to admin:",e)}let f=await d.Z.create({name:r,ownerId:p,participants:[p],tasks:[],estimationType:o,status:"active",shareLink:g});return console.log("Session created successfully with ID:",f._id),a.Z.json(f,{status:201})}catch(e){return console.error("Error creating session:",e),a.Z.json({error:"Failed to create session"},{status:500})}}async function GET(e){try{let e=await (0,u.getServerSession)(l.authOptions);if(!e||!e.user)return a.Z.json({message:"Unauthorized"},{status:401});await (0,c.$)();let t=e.user,r=t.id||t.email;if(!r)return a.Z.json({error:"User ID not found"},{status:401});if(console.log("Fetching sessions for user:",r),!r){console.log("No user ID found, using test user fallback");let e=await d.Z.find({}).sort({updatedAt:-1});return console.log(`Found ${e.length} sessions in total`),a.Z.json(e)}let s={};try{if(r){if(g().isValidObjectId(r)){let e=new(g()).Types.ObjectId(r);s={$or:[{ownerId:e},{participants:e}]},console.log("Using ObjectId query:",JSON.stringify(s))}else s={$or:[{ownerId:r},{participants:r}]},console.log("Using string ID query:",JSON.stringify(s))}else console.log("No user ID provided, returning all sessions"),s={}}catch(e){console.error("Error building query:",e),s={}}let o=await d.Z.find(s).sort({updatedAt:-1});console.log(`Found ${o.length} sessions for user ${r}`);try{let e=o.map(e=>{let t=e.toObject();return{...t,_id:t._id.toString(),createdAt:t.createdAt?.toISOString()||new Date().toISOString(),updatedAt:t.updatedAt?.toISOString()||new Date().toISOString(),status:t.status||"active",tasks:t.tasks.map(e=>({...e,_id:e._id.toString(),status:e.status||"pending"}))}});return console.log("Successfully serialized sessions"),a.Z.json(e)}catch(e){throw console.error("Error serializing sessions:",e),e}}catch(e){return console.error("Failed to get sessions:",e),a.Z.json({message:"Failed to get sessions",error:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0},{status:500})}}let f=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/sessions/route",pathname:"/api/sessions",filename:"route",bundlePath:"app/api/sessions/route"},resolvedPagePath:"/Users/hector.jaraba/Proyects/cursor-planning-poker/src/app/api/sessions/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:x,staticGenerationAsyncStorage:w,serverHooks:y,headerHooks:S,staticGenerationBailout:q}=f,h="/api/sessions/route"}};var t=require("../../../webpack-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),r=t.X(0,[657,199,798,960,20,560,919,685,67],()=>__webpack_exec__(56275));module.exports=r})();